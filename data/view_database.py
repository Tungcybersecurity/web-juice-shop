#!/usr/bin/env python3
"""
Script ƒë·ªÉ xem c√°c record trong database.db
"""

import sqlite3
from tabulate import tabulate

def view_database():
    """Xem t·∫•t c·∫£ record trong database"""
    try:
        # K·∫øt n·ªëi database
        conn = sqlite3.connect('D:/CTF/Juice-shop-python/data/database.db')
        cursor = conn.cursor()
        
        print("üóÑÔ∏è  DATABASE VIEWER - Juice Shop Python")
        print("=" * 60)
        
        # 1. Xem c·∫•u tr√∫c b·∫£ng products
        print("\nüìã C·∫§U TR√öC B·∫¢NG PRODUCTS:")
        print("-" * 40)
        cursor.execute("PRAGMA table_info(products)")
        columns = cursor.fetchall()
        for col in columns:
            print(f"  {col[1]} ({col[2]}) - {'NOT NULL' if col[3] else 'NULL'}")
        
        # 2. Xem s·ªë l∆∞·ª£ng record trong m·ªói b·∫£ng
        print("\nüìä TH·ªêNG K√ä S·ªê L∆Ø·ª¢NG RECORD:")
        print("-" * 40)
        tables = ['users', 'products', 'orders', 'baskets']
        for table in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"  {table.upper()}: {count} records")
        
        # 3. Xem t·∫•t c·∫£ s·∫£n ph·∫©m
        print("\nüçπ DANH S√ÅCH S·∫¢N PH·∫®M:")
        print("-" * 40)
        cursor.execute("SELECT * FROM products ORDER BY id")
        products = cursor.fetchall()
        
        if products:
            headers = ['ID', 'T√™n', 'M√¥ t·∫£', 'Gi√° (VNƒê)', 'Stock', 'Image', 'Created At']
            # C·∫Øt m√¥ t·∫£ ng·∫Øn ƒë·ªÉ d·ªÖ ƒë·ªçc
            formatted_products = []
            for product in products:
                desc = product[2][:50] + "..." if product[2] and len(product[2]) > 50 else product[2] or "N/A"
                formatted_products.append([
                    product[0],  # ID
                    product[1],  # T√™n
                    desc,        # M√¥ t·∫£ (c·∫Øt ng·∫Øn)
                    f"{product[3]:,}" if product[3] else "N/A",  # Gi√°
                    product[4] or 0,  # Stock
                    product[5] or "N/A",  # Image
                    product[6][:10] if product[6] else "N/A"  # Created At
                ])
            
            print(tabulate(formatted_products, headers=headers, tablefmt="grid"))
        else:
            print("  Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o!")
        
        # 4. Xem t·∫•t c·∫£ users
        print("\nüë• DANH S√ÅCH USERS:")
        print("-" * 40)
        cursor.execute("SELECT id, username, email, created_at FROM users ORDER BY id")
        users = cursor.fetchall()
        
        if users:
            headers = ['ID', 'Username', 'Email', 'Created At']
            formatted_users = []
            for user in users:
                formatted_users.append([
                    user[0],  # ID
                    user[1],  # Username
                    user[2],  # Email
                    user[3][:10] if user[3] else "N/A"  # Created At
                ])
            
            print(tabulate(formatted_users, headers=headers, tablefmt="grid"))
        else:
            print("  Kh√¥ng c√≥ user n√†o!")
        
        # 5. Xem t·∫•t c·∫£ orders
        print("\nüì¶ DANH S√ÅCH ORDERS:")
        print("-" * 40)
        cursor.execute("SELECT * FROM orders ORDER BY id")
        orders = cursor.fetchall()
        
        if orders:
            headers = ['ID', 'User ID', 'Total Amount', 'Status', 'Created At']
            formatted_orders = []
            for order in orders:
                formatted_orders.append([
                    order[0],  # ID
                    order[1],  # User ID
                    f"{order[2]:,}" if order[2] else "N/A",  # Total Amount
                    order[3] or "N/A",  # Status
                    order[4][:10] if order[4] else "N/A"  # Created At
                ])
            
            print(tabulate(formatted_orders, headers=headers, tablefmt="grid"))
        else:
            print("  Kh√¥ng c√≥ order n√†o!")
        
        # 6. Xem t·∫•t c·∫£ baskets
        print("\nüõí DANH S√ÅCH BASKETS:")
        print("-" * 40)
        cursor.execute("SELECT * FROM baskets ORDER BY id")
        baskets = cursor.fetchall()
        
        if baskets:
            headers = ['ID', 'User ID', 'Product ID', 'Quantity', 'Created At']
            formatted_baskets = []
            for basket in baskets:
                formatted_baskets.append([
                    basket[0],  # ID
                    basket[1],  # User ID
                    basket[2],  # Product ID
                    basket[3],  # Quantity
                    basket[4][:10] if basket[4] else "N/A"  # Created At
                ])
            
            print(tabulate(formatted_baskets, headers=headers, tablefmt="grid"))
        else:
            print("  Kh√¥ng c√≥ basket n√†o!")
        
        # 7. Ki·ªÉm tra field image c·ªßa products
        print("\nüñºÔ∏è  KI·ªÇM TRA FIELD IMAGE:")
        print("-" * 40)
        cursor.execute("SELECT id, name, image FROM products ORDER BY id")
        image_check = cursor.fetchall()
        
        if image_check:
            headers = ['ID', 'T√™n s·∫£n ph·∫©m', 'Image Path']
            print(tabulate(image_check, headers=headers, tablefmt="grid"))
            
            # Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n
            print("\nüîç PH√ÇN T√çCH ƒê∆Ø·ªúNG D·∫™N IMAGE:")
            for product in image_check:
                image_path = product[2]
                if image_path:
                    if image_path.startswith('/static/'):
                        print(f"  ‚úÖ {product[1]}: ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë√∫ng")
                    elif image_path.startswith('D:/') or image_path.startswith('C:/'):
                        print(f"  ‚ùå {product[1]}: ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi (c·∫ßn s·ª≠a)")
                    else:
                        print(f"  ‚ö†Ô∏è  {product[1]}: ƒê∆∞·ªùng d·∫´n kh√¥ng chu·∫©n")
                else:
                    print(f"  ‚ùå {product[1]}: Kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n image")
        else:
            print("  Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ ki·ªÉm tra!")
        
        conn.close()
        print("\n‚úÖ Ho√†n th√†nh xem database!")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi xem database: {e}")

def view_specific_table(table_name):
    """Xem record c·ªßa m·ªôt b·∫£ng c·ª• th·ªÉ"""
    try:
        conn = sqlite3.connect('D:/CTF/Juice-shop-python/data/database.db')
        cursor = conn.cursor()
        
        print(f"\nüìã B·∫¢NG {table_name.upper()}:")
        print("-" * 40)
        
        cursor.execute(f"SELECT * FROM {table_name}")
        records = cursor.fetchall()
        
        if records:
            # L·∫•y t√™n c·ªôt
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = [col[1] for col in cursor.fetchall()]
            
            print(tabulate(records, headers=columns, tablefmt="grid"))
        else:
            print(f"  Kh√¥ng c√≥ record n√†o trong b·∫£ng {table_name}!")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå L·ªói khi xem b·∫£ng {table_name}: {e}")

def main():
    print("üóÑÔ∏è  DATABASE VIEWER")
    print("=" * 50)
    
    print("Ch·ªçn h√†nh ƒë·ªông:")
    print("1. Xem t·∫•t c·∫£ database")
    print("2. Xem b·∫£ng products")
    print("3. Xem b·∫£ng users")
    print("4. Xem b·∫£ng orders")
    print("5. Xem b·∫£ng baskets")
    print("6. Tho√°t")
    
    choice = input("\nNh·∫≠p l·ª±a ch·ªçn (1-6): ").strip()
    
    if choice == "1":
        view_database()
    elif choice == "2":
        view_specific_table("products")
    elif choice == "3":
        view_specific_table("users")
    elif choice == "4":
        view_specific_table("orders")
    elif choice == "5":
        view_specific_table("baskets")
    elif choice == "6":
        print("T·∫°m bi·ªát!")
    else:
        print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main() 