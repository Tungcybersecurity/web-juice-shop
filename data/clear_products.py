#!/usr/bin/env python3
"""
Script ƒë·ªÉ x√≥a h·∫øt record trong b·∫£ng products
"""

import sqlite3

def clear_products_table():
    """X√≥a h·∫øt record trong b·∫£ng products"""
    try:
        # K·∫øt n·ªëi database
        conn = sqlite3.connect('D:/CTF/Juice-shop-python/data/database.db')
        cursor = conn.cursor()
        
        # ƒê·∫øm s·ªë record tr∆∞·ªõc khi x√≥a
        cursor.execute("SELECT COUNT(*) FROM products")
        count_before = cursor.fetchone()[0]
        print(f"S·ªë record hi·ªán t·∫°i: {count_before}")
        
        if count_before == 0:
            print("B·∫£ng products ƒë√£ tr·ªëng!")
            return
        
        # X√≥a h·∫øt record
        cursor.execute("DELETE FROM products")
        
        # Reset auto-increment counter
        cursor.execute("DELETE FROM sqlite_sequence WHERE name='products'")
        
        # Commit thay ƒë·ªïi
        conn.commit()
        
        # ƒê·∫øm s·ªë record sau khi x√≥a
        cursor.execute("SELECT COUNT(*) FROM products")
        count_after = cursor.fetchone()[0]
        
        print(f"ƒê√£ x√≥a {count_before} record th√†nh c√¥ng!")
        print(f"S·ªë record c√≤n l·∫°i: {count_after}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"L·ªói khi x√≥a record: {e}")
        return False

def reset_products_table():
    """Reset ho√†n to√†n b·∫£ng products (x√≥a v√† t·∫°o l·∫°i)"""
    try:
        # K·∫øt n·ªëi database
        conn = sqlite3.connect('data/database.db')
        cursor = conn.cursor()
        
        # X√≥a b·∫£ng c≈©
        cursor.execute("DROP TABLE IF EXISTS products")
        
        # T·∫°o l·∫°i b·∫£ng
        create_table_sql = '''CREATE TABLE products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(100) NOT NULL,
            description TEXT,
            price DECIMAL(10,2) NOT NULL,
            stock INTEGER DEFAULT 0,
            image VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );'''
        
        cursor.execute(create_table_sql)
        conn.commit()
        
        print("ƒê√£ reset ho√†n to√†n b·∫£ng products!")
        print("B·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o l·∫°i v·ªõi schema m·ªõi.")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"L·ªói khi reset b·∫£ng: {e}")
        return False

def main():
    print("üóëÔ∏è  Script x√≥a record trong b·∫£ng products")
    print("=" * 50)
    
    print("Ch·ªçn h√†nh ƒë·ªông:")
    print("1. X√≥a h·∫øt record (gi·ªØ l·∫°i b·∫£ng)")
    print("2. Reset ho√†n to√†n b·∫£ng (x√≥a v√† t·∫°o l·∫°i)")
    print("3. Tho√°t")
    
    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
    
    if choice == "1":
        print("\nüîÑ ƒêang x√≥a h·∫øt record...")
        if clear_products_table():
            print("‚úÖ Ho√†n th√†nh!")
        else:
            print("‚ùå C√≥ l·ªói x·∫£y ra!")
            
    elif choice == "2":
        print("\n‚ö†Ô∏è  C·∫£nh b√°o: H√†nh ƒë·ªông n√†y s·∫Ω x√≥a ho√†n to√†n b·∫£ng products!")
        confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/N): ").strip().lower()
        
        if confirm == 'y':
            print("\nüîÑ ƒêang reset b·∫£ng products...")
            if reset_products_table():
                print("‚úÖ Ho√†n th√†nh!")
            else:
                print("‚ùå C√≥ l·ªói x·∫£y ra!")
        else:
            print("ƒê√£ h·ªßy thao t√°c.")
            
    elif choice == "3":
        print("T·∫°m bi·ªát!")
        
    else:
        print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main() 